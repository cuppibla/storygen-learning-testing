name: StoryGen CI/CD

on:
  push:
    branches:
      - main
  workflow_dispatch: # Allow manual triggers

env:
  # Core configuration - use repository variables with fallbacks
  PROJECT_ID: ${{ vars.GCP_PROJECT_ID || 'your-project-id' }}
  REGION: ${{ vars.GCP_REGION || 'us-central1' }}
  ARTIFACT_REPO: ${{ vars.ARTIFACT_REPO || 'storygen-repo' }}
  
  # Service names - use repository variables with defaults
  BACKEND_SERVICE_NAME: ${{ vars.BACKEND_SERVICE_NAME || 'genai-backend' }}
  FRONTEND_SERVICE_NAME: ${{ vars.FRONTEND_SERVICE_NAME || 'genai-frontend' }}
  
  # Image names - use repository variables with defaults
  BACKEND_IMAGE_NAME: ${{ vars.BACKEND_IMAGE_NAME || 'storygen-backend' }}
  FRONTEND_IMAGE_NAME: ${{ vars.FRONTEND_IMAGE_NAME || 'storygen-frontend' }}
  
  # Storage and secrets - use repository variables with defaults
  BUCKET_NAME: ${{ vars.BUCKET_NAME || format('{0}-story-images', vars.GCP_PROJECT_ID || 'your-project-id') }}
  SECRET_NAME: ${{ vars.SECRET_NAME || 'storygen-google-api-key' }}
  
  # Resource configuration - use repository variables with defaults
  BACKEND_MEMORY: ${{ vars.BACKEND_MEMORY || '2Gi' }}
  BACKEND_CPU: ${{ vars.BACKEND_CPU || '2' }}
  FRONTEND_MEMORY: ${{ vars.FRONTEND_MEMORY || '1Gi' }}
  FRONTEND_CPU: ${{ vars.FRONTEND_CPU || '1' }}
  MIN_INSTANCES: ${{ vars.MIN_INSTANCES || '0' }}
  MAX_INSTANCES: ${{ vars.MAX_INSTANCES || '2' }}

jobs:
  setup-infrastructure:
    name: Setup Infrastructure
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate required configuration
        run: |
          echo "🔍 Validating configuration..."
          
          # Check secrets
          if [ -z "${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}" ]; then
            echo "❌ WORKLOAD_IDENTITY_PROVIDER secret not set"
            echo "Please set up Workload Identity Provider and add it to repository secrets"
            exit 1
          fi
          
          if [ -z "${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}" ]; then
            echo "❌ GCP_SERVICE_ACCOUNT_EMAIL secret not set"
            echo "Please set the service account email in repository secrets"
            exit 1
          fi
          
          # Check required variables
          if [ -z "${{ vars.GCP_PROJECT_ID }}" ] || [ "${{ env.PROJECT_ID }}" = "your-project-id" ]; then
            echo "❌ GCP_PROJECT_ID repository variable not set"
            echo "Please set GCP_PROJECT_ID in repository variables"
            exit 1
          fi
          
          echo "✅ Configuration validated:"
          echo "  Project ID: ${{ env.PROJECT_ID }}"
          echo "  Region: ${{ env.REGION }}"
          echo "  Backend Service: ${{ env.BACKEND_SERVICE_NAME }}"
          echo "  Frontend Service: ${{ env.FRONTEND_SERVICE_NAME }}"

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}
          project_id: ${{ env.PROJECT_ID }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Enable required APIs
        run: |
          echo "🔧 Enabling required Google Cloud APIs..."
          gcloud services enable \
            run.googleapis.com \
            cloudbuild.googleapis.com \
            artifactregistry.googleapis.com \
            aiplatform.googleapis.com \
            storage.googleapis.com \
            secretmanager.googleapis.com \
            --project=${{ env.PROJECT_ID }}

      - name: Setup Artifact Registry
        run: |
          echo "🏗️ Setting up Artifact Registry..."
          
          # Create repository if it doesn't exist
          if ! gcloud artifacts repositories describe ${{ env.ARTIFACT_REPO }} \
               --location=${{ env.REGION }} \
               --project=${{ env.PROJECT_ID }} &>/dev/null; then
            echo "Creating Artifact Registry repository..."
            gcloud artifacts repositories create ${{ env.ARTIFACT_REPO }} \
              --repository-format=docker \
              --location=${{ env.REGION }} \
              --description="Docker repository for StoryGen application" \
              --project=${{ env.PROJECT_ID }}
          else
            echo "✅ Artifact Registry repository already exists"
          fi
          
          # Configure Docker authentication
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: Setup Secret Manager
        run: |
          echo "🔐 Setting up Secret Manager..."
          
          # Create secret if it doesn't exist
          if ! gcloud secrets describe ${{ env.SECRET_NAME }} \
               --project=${{ env.PROJECT_ID }} &>/dev/null; then
            echo "Creating secret for Google API key..."
            gcloud secrets create ${{ env.SECRET_NAME }} \
              --replication-policy="automatic" \
              --project=${{ env.PROJECT_ID }}
            
            # Add the API key if provided
            if [ -n "${{ secrets.GOOGLE_API_KEY }}" ]; then
              echo "Adding API key to secret..."
              echo -n "${{ secrets.GOOGLE_API_KEY }}" | \
                gcloud secrets versions add ${{ env.SECRET_NAME }} \
                  --data-file=- \
                  --project=${{ env.PROJECT_ID }}
            else
              echo "⚠️ GOOGLE_API_KEY secret not provided. Please add it manually or set in repository secrets."
            fi
          else
            echo "✅ Secret Manager secret already exists"
            
            # Update with new API key if provided
            if [ -n "${{ secrets.GOOGLE_API_KEY }}" ]; then
              echo "Updating API key secret..."
              echo -n "${{ secrets.GOOGLE_API_KEY }}" | \
                gcloud secrets versions add ${{ env.SECRET_NAME }} \
                  --data-file=- \
                  --project=${{ env.PROJECT_ID }}
            fi
          fi

  build-and-deploy-backend:
    name: Build and Deploy Backend
    runs-on: ubuntu-latest
    needs: setup-infrastructure
    permissions:
      contents: read
      id-token: write
    outputs:
      backend-url: ${{ steps.deploy-backend.outputs.backend-url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}
          project_id: ${{ env.PROJECT_ID }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: Build and push backend Docker image
        run: |
          echo "🔨 Building backend Docker image..."
          cd backend
          
          # Build using Cloud Build for better performance and caching
          gcloud builds submit \
            --tag ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REPO }}/${{ env.BACKEND_IMAGE_NAME }}:latest \
            --project=${{ env.PROJECT_ID }}
          
          echo "✅ Backend image built and pushed successfully"

      - name: Deploy backend to Cloud Run
        id: deploy-backend
        run: |
          echo "📦 Deploying backend to Cloud Run..."
          
          # Get expected frontend URL for CORS configuration
          FRONTEND_URL="https://${{ env.FRONTEND_SERVICE_NAME }}-${{ env.PROJECT_ID }}.${{ env.REGION }}.run.app"
          
          gcloud run deploy ${{ env.BACKEND_SERVICE_NAME }} \
            --image=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REPO }}/${{ env.BACKEND_IMAGE_NAME }}:latest \
            --platform=managed \
            --region=${{ env.REGION }} \
            --allow-unauthenticated \
            --port=8080 \
            --session-affinity \
            --set-env-vars="GOOGLE_CLOUD_PROJECT=${{ env.PROJECT_ID }}" \
            --set-env-vars="GOOGLE_CLOUD_PROJECT_ID=${{ env.PROJECT_ID }}" \
            --set-env-vars="GENMEDIA_BUCKET=${{ env.BUCKET_NAME }}" \
            --set-env-vars="GOOGLE_GENAI_USE_VERTEXAI=FALSE" \
            --set-env-vars="GOOGLE_CLOUD_REGION=${{ env.REGION }}" \
            --set-env-vars="FRONTEND_URL=$FRONTEND_URL" \
            --set-secrets="GOOGLE_API_KEY=${{ env.SECRET_NAME }}:latest" \
            --memory=${{ env.BACKEND_MEMORY }} \
            --cpu=${{ env.BACKEND_CPU }} \
            --min-instances=${{ env.MIN_INSTANCES }} \
            --max-instances=${{ env.MAX_INSTANCES }} \
            --project=${{ env.PROJECT_ID }}

          # Get the actual backend URL
          BACKEND_URL=$(gcloud run services describe ${{ env.BACKEND_SERVICE_NAME }} \
            --platform=managed \
            --region=${{ env.REGION }} \
            --format="value(status.url)" \
            --project=${{ env.PROJECT_ID }})

          echo "✅ Backend deployed successfully!"
          echo "🔗 Backend URL: $BACKEND_URL"
          echo "backend-url=$BACKEND_URL" >> $GITHUB_OUTPUT

  build-and-deploy-frontend:
    name: Build and Deploy Frontend
    runs-on: ubuntu-latest
    needs: [setup-infrastructure, build-and-deploy-backend]
    permissions:
      contents: read
      id-token: write
    outputs:
      frontend-url: ${{ steps.deploy-frontend.outputs.frontend-url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}
          project_id: ${{ env.PROJECT_ID }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: Build and push frontend Docker image
        run: |
          echo "🔨 Building frontend Docker image..."
          
          # Get backend URL for build-time configuration
          BACKEND_URL="${{ needs.build-and-deploy-backend.outputs.backend-url }}"
          echo "🔗 Using backend URL: $BACKEND_URL"
          
          cd frontend
          
          # Build with backend URL as build argument
          docker build \
            --build-arg NEXT_PUBLIC_BACKEND_URL="$BACKEND_URL" \
            -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REPO }}/${{ env.FRONTEND_IMAGE_NAME }}:latest .
          
          docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REPO }}/${{ env.FRONTEND_IMAGE_NAME }}:latest
          
          echo "✅ Frontend image built and pushed successfully"

      - name: Deploy frontend to Cloud Run
        id: deploy-frontend
        run: |
          echo "🚀 Deploying frontend to Cloud Run..."
          
          BACKEND_URL="${{ needs.build-and-deploy-backend.outputs.backend-url }}"
          
          gcloud run deploy ${{ env.FRONTEND_SERVICE_NAME }} \
            --image=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REPO }}/${{ env.FRONTEND_IMAGE_NAME }}:latest \
            --platform=managed \
            --region=${{ env.REGION }} \
            --allow-unauthenticated \
            --port=3000 \
            --set-env-vars="NEXT_PUBLIC_BACKEND_URL=$BACKEND_URL" \
            --memory=${{ env.FRONTEND_MEMORY }} \
            --cpu=${{ env.FRONTEND_CPU }} \
            --min-instances=${{ env.MIN_INSTANCES }} \
            --max-instances=${{ env.MAX_INSTANCES }} \
            --project=${{ env.PROJECT_ID }}

          # Get the frontend URL
          FRONTEND_URL=$(gcloud run services describe ${{ env.FRONTEND_SERVICE_NAME }} \
            --platform=managed \
            --region=${{ env.REGION }} \
            --format="value(status.url)" \
            --project=${{ env.PROJECT_ID }})

          echo "✅ Frontend deployed successfully!"
          echo "🌐 Frontend URL: $FRONTEND_URL"
          echo "frontend-url=$FRONTEND_URL" >> $GITHUB_OUTPUT

  health-check:
    name: Health Check & Validation
    runs-on: ubuntu-latest
    needs: [build-and-deploy-backend, build-and-deploy-frontend]
    permissions:
      contents: read
    steps:
      - name: Test Backend Health
        run: |
          echo "🏥 Testing backend health..."
          BACKEND_URL="${{ needs.build-and-deploy-backend.outputs.backend-url }}"
          
          if [ -z "$BACKEND_URL" ]; then
            echo "❌ Backend URL not available"
            exit 1
          fi
          
          echo "Testing backend at: $BACKEND_URL"
          
          # Test health endpoint with retries
          for i in {1..5}; do
            echo "Attempt $i/5..."
            HEALTH_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "$BACKEND_URL/health" || echo "000")
            
            if [ "$HEALTH_RESPONSE" = "200" ]; then
              echo "✅ Backend health check passed"
              curl -s "$BACKEND_URL/health"
              break
            else
              echo "⚠️ Backend health check failed (HTTP $HEALTH_RESPONSE)"
              if [ $i -eq 5 ]; then
                echo "❌ Backend health check failed after 5 attempts"
                exit 1
              fi
              echo "Retrying in 30 seconds..."
              sleep 30
            fi
          done

      - name: Test Frontend Accessibility
        run: |
          echo "🌐 Testing frontend accessibility..."
          FRONTEND_URL="${{ needs.build-and-deploy-frontend.outputs.frontend-url }}"
          
          if [ -z "$FRONTEND_URL" ]; then
            echo "❌ Frontend URL not available"
            exit 1
          fi
          
          echo "Testing frontend at: $FRONTEND_URL"
          
          # Test frontend accessibility
          FRONTEND_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "$FRONTEND_URL" || echo "000")
          
          if [ "$FRONTEND_RESPONSE" = "200" ]; then
            echo "✅ Frontend accessibility check passed"
          else
            echo "❌ Frontend accessibility check failed (HTTP $FRONTEND_RESPONSE)"
            echo "Retrying in 30 seconds..."
            sleep 30
            FRONTEND_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "$FRONTEND_URL" || echo "000")
            if [ "$FRONTEND_RESPONSE" = "200" ]; then
              echo "✅ Frontend accessibility check passed on retry"
            else
              echo "❌ Frontend accessibility check failed on retry (HTTP $FRONTEND_RESPONSE)"
              exit 1
            fi
          fi

      - name: Display Deployment Summary
        run: |
          echo ""
          echo "🎉 Deployment Complete!"
          echo "======================="
          echo ""
          echo "📋 Configuration Used:"
          echo "  Project ID: ${{ env.PROJECT_ID }}"
          echo "  Region: ${{ env.REGION }}"
          echo "  Backend Service: ${{ env.BACKEND_SERVICE_NAME }}"
          echo "  Frontend Service: ${{ env.FRONTEND_SERVICE_NAME }}"
          echo ""
          echo "📋 Service URLs:"
          echo "🔗 Backend:  ${{ needs.build-and-deploy-backend.outputs.backend-url }}"
          echo "🌐 Frontend: ${{ needs.build-and-deploy-frontend.outputs.frontend-url }}"
          echo ""
          echo "📋 Next Steps:"
          echo "1. Visit your application at the Frontend URL"
          echo "2. Verify the connection indicator shows 'Connected'"
          echo "3. Test story generation functionality"
          echo ""
          echo "🔧 Troubleshooting:"
          echo "- Check service logs: gcloud run services logs read SERVICE_NAME --region=${{ env.REGION }} --project=${{ env.PROJECT_ID }}"
          echo "- Verify environment variables in Cloud Run console"
          echo "- Check WebSocket connectivity from browser developer tools"
