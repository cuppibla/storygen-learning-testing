
# This file is autogenerated. Do not edit this file directly.
# Please make changes to the application template instead.

module "frontend-service" {
  source                        = "github.com/GoogleCloudPlatform/terraform-google-cloud-run//modules/v2?ref=v0.20.1"
  project_id                    = var.project_id
  location                      = var.region
  service_name                  = var.frontend_service_name
  containers                    = [{"container_image" = var.frontend_image, "container_name" = "frontend-container", "env_vars" = {"NEXT_PUBLIC_BACKEND_URL" = module.backend-service.service_uri}, "ports" = {"container_port" = 3000, "name" = "http1"}, "resources" = {"limits" = {"memory" = "1Gi", "cpu" = "1000m"}}}]
  service_account_project_roles = ["roles/run.invoker"]
  # VPC access removed to avoid networking permissions issues
  # vpc_access = {
  #   egress = "ALL_TRAFFIC"
  #   network_interfaces = {
  #     network    = "default"
  #     subnetwork = "default"
  #   }
  # }
  cloud_run_deletion_protection = false
  enable_prometheus_sidecar     = true
  service_scaling = {
    min_instance_count = 0
  }
  template_scaling = {
    max_instance_count = var.max_instances
    min_instance_count = var.min_instances
  }
  depends_on = [module.project-services, module.project-services-billing-project]
}
module "backend-service" {
  source                        = "github.com/GoogleCloudPlatform/terraform-google-cloud-run//modules/v2?ref=v0.20.1"
  project_id                    = var.project_id
  location                      = var.region
  service_name                  = var.backend_service_name
  containers                    = [{"container_image" = var.backend_image, "container_name" = "backend-container", "env_vars" = {"GOOGLE_CLOUD_PROJECT_ID" = var.project_id, "GENMEDIA_BUCKET" = var.bucket_name, "GOOGLE_GENAI_USE_VERTEXAI" = "FALSE"}, "ports" = {"container_port" = 8080, "name" = "http1"}, "resources" = {"limits" = {"memory" = "2Gi", "cpu" = "2000m"}}, "env_vars_secret" = {"GOOGLE_API_KEY" = {"secret_name" = var.secret_name, "secret_version" = "latest"}}}]
  service_account_project_roles = ["roles/aiplatform.user", "roles/secretmanager.secretAccessor"]
  # VPC access removed to avoid networking permissions issues
  # vpc_access = {
  #   egress = "ALL_TRAFFIC"
  #   network_interfaces = {
  #     network    = "default"
  #     subnetwork = "default"
  #   }
  # }
  cloud_run_deletion_protection = false
  enable_prometheus_sidecar     = true
  service_scaling = {
    min_instance_count = 0
  }
  service_labels = {
    imagen_vertex_ai_vertex-ai = "true"
  }
  template_scaling = {
    max_instance_count = var.max_instances
    min_instance_count = var.min_instances
  }
  depends_on = [module.project-services, module.project-services-billing-project]
}
module "imagen-vertex-ai" {
  source        = "github.com/terraform-google-modules/terraform-google-project-factory//modules/project_services?ref=v18.0.0"
  project_id    = var.project_id
  activate_apis = ["aiplatform.googleapis.com"]
  depends_on    = [module.project-services, module.project-services-billing-project]
}
# Bucket is managed outside Terraform to avoid conflicts with existing data
# module "generated-images-bucket" {
#   source        = "github.com/terraform-google-modules/terraform-google-cloud-storage//modules/simple_bucket?ref=v10.0.2"
#   project_id    = var.project_id
#   location      = var.region
#   name          = var.bucket_name
#   force_destroy = false
#   iam_members   = concat([{"role" = "roles/storage.objectAdmin", "member" = module.frontend-service.service_account_id.member}], [{"member" = module.backend-service.service_account_id.member, "role" = "roles/storage.objectAdmin"}])
#   storage_class = "STANDARD"
#   depends_on    = [module.project-services, module.project-services-billing-project]
# }
module "project-services" {
  source                      = "github.com/terraform-google-modules/terraform-google-project-factory//modules/project_services?ref=v17.1.0"
  project_id                  = var.project_id
  disable_services_on_destroy = false
  activate_apis               = ["run.googleapis.com", "cloudbuild.googleapis.com", "artifactregistry.googleapis.com", "secretmanager.googleapis.com", "storage.googleapis.com"]
}
module "project-services-billing-project" {
  source                      = "github.com/terraform-google-modules/terraform-google-project-factory//modules/project_services?ref=v17.1.0"
  project_id                  = var.project_id
  disable_services_on_destroy = false
  activate_apis               = ["apphub.googleapis.com", "cloudresourcemanager.googleapis.com"]
}
